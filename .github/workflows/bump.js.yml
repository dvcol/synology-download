# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Bump package.json version

on:
  push:
    branches: [main]

env:
  node_version: 16.x

jobs:
  version:
    name: build
    runs-on: ubuntu-latest

    env:
      old_version: ''
      new_version: ''

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js ${{ env.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'

      - name: Extract version from package.json
        run: |
          # extract version from package.json
          version=$(jq -r .version package.json)
          echo "Version extraced: '$version'"
          
          # assign version to old_version env variable
          echo "old_version=$version" >> $GITHUB_ENV

      - name: Bump version
        run: |
          # Split version numbers
          n=( ${old_version//./ } )

          # extract commit version
          message=$(git log -1 --pretty=format:"%s")
          echo "commit message '$message'"

          prefix="${message%%(*}"
          echo "$message prefix '$message'"

          scope="$(awk -F"[()]" '{print $2}' <<< $message)"
          echo "$message scope '$scope'"
          
          
          # Bump version depending on prefix
          if [[ $prefix == 'release' ]]
          then
            if [[ $scope =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]
            then
              version="$scope"
            else
              version="$((${n[0]}+1)).${n[1]}.${n[2]}"
            fi
          elif [[ $prefix == 'feat' ]]
          then
            version="${n[0]}.$((${n[1]}+1)).${n[2]}"
          else
            version="${n[0]}.${n[1]}.$((${n[2]}+1))"
          fi

          # Save new version to env
          echo "bumping '$old_version' to '$version'"
          echo "new_version=$version" >> $GITHUB_ENV

      - name: Write version to package.json
        run: |
          # Writing version to package.json
          npm version --commit-hooks false --git-tag-version false ${{ env.new_version }}
          echo "New package version '$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')'"

      - name: Write version to manifest.json
        run: |
          # Move to src folder
          cd ./src
          
          # Replace manifest version to align with package.json
          manifest_version=$(jq -r .version manifest.json)
          tmp=$(mktemp)
          jq --arg new_version "$new_version" '.version = $new_version' manifest.json > "$tmp" && mv "$tmp" manifest.json
          
          echo "Manifest version changed from '$manifest_version' to '$(jq -r .version manifest.json)'"

      - name: Setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Bump Version Bot"
          git config user.email "<>"

      - name: Commit files
        run: |
          # Stage the file, commit and push
          git status
          git diff --color -U0 | cat
          git add package.json package-lock.json src/manifest.json
          git commit -m "chore(version): Bumping version from '${{ env.old_version }}' to '${{ env.new_version }}'"
          git push origin
