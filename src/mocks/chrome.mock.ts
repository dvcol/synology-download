import { deepMerge } from '@src/utils/object.utils';

const logger =
  (method: string) =>
  (...arg: any[]) =>
    console.debug(`chrome override ${method}`, arg);

const chromePatch = {
  loadTimes: logger('chrome.loadTimes'),
  csi: logger('chrome.csi'),
  action: {
    onClicked: {
      addListener: logger('chrome.action.onClicked.addListener'),
      removeListener: logger('chrome.action.onClicked.removeListener'),
      hasListener: logger('chrome.action.onClicked.hasListener'),
      hasListeners: logger('chrome.action.onClicked.hasListeners'),
      dispatch: logger('chrome.action.onClicked.dispatch'),
    },
    disable: logger('chrome.action.disable'),
    enable: logger('chrome.action.enable'),
    getBadgeBackgroundColor: logger('chrome.action.getBadgeBackgroundColor'),
    getBadgeText: logger('chrome.action.getBadgeText'),
    getBadgeTextColor: logger('chrome.action.getBadgeTextColor'),
    getPopup: logger('chrome.action.getPopup'),
    getTitle: logger('chrome.action.getTitle'),
    getUserSettings: logger('chrome.action.getUserSettings'),
    isEnabled: logger('chrome.action.isEnabled'),
    setBadgeBackgroundColor: logger('chrome.action.setBadgeBackgroundColor'),
    setBadgeText: logger('chrome.action.setBadgeText'),
    setBadgeTextColor: logger('chrome.action.setBadgeTextColor'),
    setIcon: logger('chrome.action.setIcon'),
    setPopup: logger('chrome.action.setPopup'),
    setTitle: logger('chrome.action.setTitle'),
  },
  contextMenus: {
    onClicked: {
      addListener: logger('chrome.contextMenus.onClicked.addListener'),
      removeListener: logger('chrome.contextMenus.onClicked.removeListener'),
      hasListener: logger('chrome.contextMenus.onClicked.hasListener'),
      hasListeners: logger('chrome.contextMenus.onClicked.hasListeners'),
      dispatch: logger('chrome.contextMenus.onClicked.dispatch'),
    },
    create: logger('chrome.contextMenus.create'),
    remove: logger('chrome.contextMenus.remove'),
    removeAll: logger('chrome.contextMenus.removeAll'),
    update: logger('chrome.contextMenus.update'),
    ContextType: {
      ACTION: 'chrome.contextMenus.ContextType.ACTION',
      ALL: 'chrome.contextMenus.ContextType.ALL',
      AUDIO: 'chrome.contextMenus.ContextType.AUDIO',
      BROWSER_ACTION: 'chrome.contextMenus.ContextType.BROWSER_ACTION',
      EDITABLE: 'chrome.contextMenus.ContextType.EDITABLE',
      FRAME: 'chrome.contextMenus.ContextType.FRAME',
      IMAGE: 'chrome.contextMenus.ContextType.IMAGE',
      LAUNCHER: 'chrome.contextMenus.ContextType.LAUNCHER',
      LINK: 'chrome.contextMenus.ContextType.LINK',
      PAGE: 'chrome.contextMenus.ContextType.PAGE',
      PAGE_ACTION: 'chrome.contextMenus.ContextType.PAGE_ACTION',
      SELECTION: 'chrome.contextMenus.ContextType.SELECTION',
      VIDEO: 'chrome.contextMenus.ContextType.VIDEO',
    },
    ItemType: {
      CHECKBOX: 'chrome.contextMenus.ItemType.CHECKBOX',
      NORMAL: 'chrome.contextMenus.ItemType.NORMAL',
      RADIO: 'chrome.contextMenus.ItemType.RADIO',
      SEPARATOR: 'chrome.contextMenus.ItemType.SEPARATOR',
    },
    ACTION_MENU_TOP_LEVEL_LIMIT: 'chrome.contextMenus.ACTION_MENU_TOP_LEVEL_LIMIT',
  },
  dom: {
    openOrClosedShadowRoot: logger('chrome.dom.openOrClosedShadowRoot'),
  },
  downloads: {
    onDeterminingFilename: {
      addListener: logger('chrome.downloads.onDeterminingFilename.addListener'),
      removeListener: logger('chrome.downloads.onDeterminingFilename.removeListener'),
      hasListener: logger('chrome.downloads.onDeterminingFilename.hasListener'),
      hasListeners: logger('chrome.downloads.onDeterminingFilename.hasListeners'),
      dispatch: logger('chrome.downloads.onDeterminingFilename.dispatch'),
    },
    onChanged: {
      addListener: logger('chrome.downloads.onChanged.addListener'),
      removeListener: logger('chrome.downloads.onChanged.removeListener'),
      hasListener: logger('chrome.downloads.onChanged.hasListener'),
      hasListeners: logger('chrome.downloads.onChanged.hasListeners'),
      dispatch: logger('chrome.downloads.onChanged.dispatch'),
    },
    onErased: {
      addListener: logger('chrome.downloads.onErased.addListener'),
      removeListener: logger('chrome.downloads.onErased.removeListener'),
      hasListener: logger('chrome.downloads.onErased.hasListener'),
      hasListeners: logger('chrome.downloads.onErased.hasListeners'),
      dispatch: logger('chrome.downloads.onErased.dispatch'),
    },
    onCreated: {
      addListener: logger('chrome.downloads.onCreated.addListener'),
      removeListener: logger('chrome.downloads.onCreated.removeListener'),
      hasListener: logger('chrome.downloads.onCreated.hasListener'),
      hasListeners: logger('chrome.downloads.onCreated.hasListeners'),
      dispatch: logger('chrome.downloads.onCreated.dispatch'),
    },
    acceptDanger: logger('chrome.downloads.acceptDanger'),
    cancel: logger('chrome.downloads.cancel'),
    download: logger('chrome.downloads.download'),
    erase: logger('chrome.downloads.erase'),
    getFileIcon: logger('chrome.downloads.getFileIcon'),
    open: logger('chrome.downloads.open'),
    pause: logger('chrome.downloads.pause'),
    removeFile: logger('chrome.downloads.removeFile'),
    resume: logger('chrome.downloads.resume'),
    search: logger('chrome.downloads.search'),
    setShelfEnabled: logger('chrome.downloads.setShelfEnabled'),
    setUiOptions: logger('chrome.downloads.setUiOptions'),
    show: logger('chrome.downloads.show'),
    showDefaultFolder: logger('chrome.downloads.showDefaultFolder'),
    DangerType: {
      ACCEPTED: 'chrome.downloads.DangerType.ACCEPTED',
      ACCOUNT_COMPROMISE: 'chrome.downloads.DangerType.ACCOUNT_COMPROMISE',
      ALLOWLISTED_BY_POLICY: 'chrome.downloads.DangerType.ALLOWLISTED_BY_POLICY',
      ASYNC_SCANNING: 'chrome.downloads.DangerType.ASYNC_SCANNING',
      BLOCKED_TOO_LARGE: 'chrome.downloads.DangerType.BLOCKED_TOO_LARGE',
      CONTENT: 'chrome.downloads.DangerType.CONTENT',
      DEEP_SCANNED_OPENED_DANGEROUS: 'chrome.downloads.DangerType.DEEP_SCANNED_OPENED_DANGEROUS',
      DEEP_SCANNED_SAFE: 'chrome.downloads.DangerType.DEEP_SCANNED_SAFE',
      FILE: 'chrome.downloads.DangerType.FILE',
      HOST: 'chrome.downloads.DangerType.HOST',
      PASSWORD_PROTECTED: 'chrome.downloads.DangerType.PASSWORD_PROTECTED',
      PROMPT_FOR_SCANING: 'chrome.downloads.DangerType.PROMPT_FOR_SCANING',
      SAFE: 'chrome.downloads.DangerType.SAFE',
      SENSITIVE_CONTENT_BLOCK: 'chrome.downloads.DangerType.SENSITIVE_CONTENT_BLOCK',
      SENSITIVE_CONTENT_WARNING: 'chrome.downloads.DangerType.SENSITIVE_CONTENT_WARNING',
      UNCOMMON: 'chrome.downloads.DangerType.UNCOMMON',
      UNSUPPORTED_FILE_TYPE: 'chrome.downloads.DangerType.UNSUPPORTED_FILE_TYPE',
      UNWANTED: 'chrome.downloads.DangerType.UNWANTED',
      URL: 'chrome.downloads.DangerType.URL',
    },
    FilenameConflictAction: {
      OVERWRITE: 'chrome.downloads.FilenameConflictAction.OVERWRITE',
      PROMPT: 'chrome.downloads.FilenameConflictAction.PROMPT',
      UNIQUIFY: 'chrome.downloads.FilenameConflictAction.UNIQUIFY',
    },
    HttpMethod: {
      GET: 'chrome.downloads.HttpMethod.GET',
      POST: 'chrome.downloads.HttpMethod.POST',
    },
    InterruptReason: {
      CRASH: 'chrome.downloads.InterruptReason.CRASH',
      FILE_ACCESS_DENIED: 'chrome.downloads.InterruptReason.FILE_ACCESS_DENIED',
      FILE_BLOCKED: 'chrome.downloads.InterruptReason.FILE_BLOCKED',
      FILE_FAILED: 'chrome.downloads.InterruptReason.FILE_FAILED',
      FILE_HASH_MISMATCH: 'chrome.downloads.InterruptReason.FILE_HASH_MISMATCH',
      FILE_NAME_TOO_LONG: 'chrome.downloads.InterruptReason.FILE_NAME_TOO_LONG',
      FILE_NO_SPACE: 'chrome.downloads.InterruptReason.FILE_NO_SPACE',
      FILE_SAME_AS_SOURCE: 'chrome.downloads.InterruptReason.FILE_SAME_AS_SOURCE',
      FILE_SECURITY_CHECK_FAILED: 'chrome.downloads.InterruptReason.FILE_SECURITY_CHECK_FAILED',
      FILE_TOO_LARGE: 'chrome.downloads.InterruptReason.FILE_TOO_LARGE',
      FILE_TOO_SHORT: 'chrome.downloads.InterruptReason.FILE_TOO_SHORT',
      FILE_TRANSIENT_ERROR: 'chrome.downloads.InterruptReason.FILE_TRANSIENT_ERROR',
      FILE_VIRUS_INFECTED: 'chrome.downloads.InterruptReason.FILE_VIRUS_INFECTED',
      NETWORK_DISCONNECTED: 'chrome.downloads.InterruptReason.NETWORK_DISCONNECTED',
      NETWORK_FAILED: 'chrome.downloads.InterruptReason.NETWORK_FAILED',
      NETWORK_INVALID_REQUEST: 'chrome.downloads.InterruptReason.NETWORK_INVALID_REQUEST',
      NETWORK_SERVER_DOWN: 'chrome.downloads.InterruptReason.NETWORK_SERVER_DOWN',
      NETWORK_TIMEOUT: 'chrome.downloads.InterruptReason.NETWORK_TIMEOUT',
      SERVER_BAD_CONTENT: 'chrome.downloads.InterruptReason.SERVER_BAD_CONTENT',
      SERVER_CERT_PROBLEM: 'chrome.downloads.InterruptReason.SERVER_CERT_PROBLEM',
      SERVER_CONTENT_LENGTH_MISMATCH: 'chrome.downloads.InterruptReason.SERVER_CONTENT_LENGTH_MISMATCH',
      SERVER_CROSS_ORIGIN_REDIRECT: 'chrome.downloads.InterruptReason.SERVER_CROSS_ORIGIN_REDIRECT',
      SERVER_FAILED: 'chrome.downloads.InterruptReason.SERVER_FAILED',
      SERVER_FORBIDDEN: 'chrome.downloads.InterruptReason.SERVER_FORBIDDEN',
      SERVER_NO_RANGE: 'chrome.downloads.InterruptReason.SERVER_NO_RANGE',
      SERVER_UNAUTHORIZED: 'chrome.downloads.InterruptReason.SERVER_UNAUTHORIZED',
      SERVER_UNREACHABLE: 'chrome.downloads.InterruptReason.SERVER_UNREACHABLE',
      USER_CANCELED: 'chrome.downloads.InterruptReason.USER_CANCELED',
      USER_SHUTDOWN: 'chrome.downloads.InterruptReason.USER_SHUTDOWN',
    },
    State: {
      COMPLETE: 'chrome.downloads.State.COMPLETE',
      IN_PROGRESS: 'chrome.downloads.State.IN_PROGRESS',
      INTERRUPTED: 'chrome.downloads.State.INTERRUPTED',
    },
  },
  extension: {
    getBackgroundPage: logger('chrome.extension.getBackgroundPage'),
    getViews: logger('chrome.extension.getViews'),
    isAllowedFileSchemeAccess: logger('chrome.extension.isAllowedFileSchemeAccess'),
    isAllowedIncognitoAccess: logger('chrome.extension.isAllowedIncognitoAccess'),
    setUpdateUrlData: logger('chrome.extension.setUpdateUrlData'),
    ViewType: {
      POPUP: 'chrome.extension.ViewType.POPUP',
      TAB: 'chrome.extension.ViewType.TAB',
    },
    inIncognitoContext: 'chrome.extension.inIncognitoContext',
  },
  i18n: {
    detectLanguage: logger('chrome.i18n.detectLanguage'),
    getAcceptLanguages: logger('chrome.i18n.getAcceptLanguages'),
    getMessage: logger('chrome.i18n.getMessage'),
    getUILanguage: logger('chrome.i18n.getUILanguage'),
  },
  management: {
    getPermissionWarningsByManifest: logger('chrome.management.getPermissionWarningsByManifest'),
    getSelf: logger('chrome.management.getSelf'),
    uninstallSelf: logger('chrome.management.uninstallSelf'),
    ExtensionDisabledReason: {
      PERMISSIONS_INCREASE: 'chrome.management.ExtensionDisabledReason.PERMISSIONS_INCREASE',
      UNKNOWN: 'chrome.management.ExtensionDisabledReason.UNKNOWN',
    },
    ExtensionInstallType: {
      ADMIN: 'chrome.management.ExtensionInstallType.ADMIN',
      DEVELOPMENT: 'chrome.management.ExtensionInstallType.DEVELOPMENT',
      NORMAL: 'chrome.management.ExtensionInstallType.NORMAL',
      OTHER: 'chrome.management.ExtensionInstallType.OTHER',
      SIDELOAD: 'chrome.management.ExtensionInstallType.SIDELOAD',
    },
    ExtensionType: {
      EXTENSION: 'chrome.management.ExtensionType.EXTENSION',
      HOSTED_APP: 'chrome.management.ExtensionType.HOSTED_APP',
      LEGACY_PACKAGED_APP: 'chrome.management.ExtensionType.LEGACY_PACKAGED_APP',
      LOGIN_SCREEN_EXTENSION: 'chrome.management.ExtensionType.LOGIN_SCREEN_EXTENSION',
      PACKAGED_APP: 'chrome.management.ExtensionType.PACKAGED_APP',
      THEME: 'chrome.management.ExtensionType.THEME',
    },
    LaunchType: {
      OPEN_AS_PINNED_TAB: 'chrome.management.LaunchType.OPEN_AS_PINNED_TAB',
      OPEN_AS_REGULAR_TAB: 'chrome.management.LaunchType.OPEN_AS_REGULAR_TAB',
      OPEN_AS_WINDOW: 'chrome.management.LaunchType.OPEN_AS_WINDOW',
      OPEN_FULL_SCREEN: 'chrome.management.LaunchType.OPEN_FULL_SCREEN',
    },
  },
  notifications: {
    onShowSettings: {
      addListener: logger('chrome.notifications.onShowSettings.addListener'),
      removeListener: logger('chrome.notifications.onShowSettings.removeListener'),
      hasListener: logger('chrome.notifications.onShowSettings.hasListener'),
      hasListeners: logger('chrome.notifications.onShowSettings.hasListeners'),
      dispatch: logger('chrome.notifications.onShowSettings.dispatch'),
    },
    onPermissionLevelChanged: {
      addListener: logger('chrome.notifications.onPermissionLevelChanged.addListener'),
      removeListener: logger('chrome.notifications.onPermissionLevelChanged.removeListener'),
      hasListener: logger('chrome.notifications.onPermissionLevelChanged.hasListener'),
      hasListeners: logger('chrome.notifications.onPermissionLevelChanged.hasListeners'),
      dispatch: logger('chrome.notifications.onPermissionLevelChanged.dispatch'),
    },
    onButtonClicked: {
      addListener: logger('chrome.notifications.onButtonClicked.addListener'),
      removeListener: logger('chrome.notifications.onButtonClicked.removeListener'),
      hasListener: logger('chrome.notifications.onButtonClicked.hasListener'),
      hasListeners: logger('chrome.notifications.onButtonClicked.hasListeners'),
      dispatch: logger('chrome.notifications.onButtonClicked.dispatch'),
    },
    onClicked: {
      addListener: logger('chrome.notifications.onClicked.addListener'),
      removeListener: logger('chrome.notifications.onClicked.removeListener'),
      hasListener: logger('chrome.notifications.onClicked.hasListener'),
      hasListeners: logger('chrome.notifications.onClicked.hasListeners'),
      dispatch: logger('chrome.notifications.onClicked.dispatch'),
    },
    onClosed: {
      addListener: logger('chrome.notifications.onClosed.addListener'),
      removeListener: logger('chrome.notifications.onClosed.removeListener'),
      hasListener: logger('chrome.notifications.onClosed.hasListener'),
      hasListeners: logger('chrome.notifications.onClosed.hasListeners'),
      dispatch: logger('chrome.notifications.onClosed.dispatch'),
    },
    clear: logger('chrome.notifications.clear'),
    create: logger('chrome.notifications.create'),
    getAll: logger('chrome.notifications.getAll'),
    getPermissionLevel: logger('chrome.notifications.getPermissionLevel'),
    update: logger('chrome.notifications.update'),
    PermissionLevel: {
      DENIED: 'chrome.notifications.PermissionLevel.DENIED',
      GRANTED: 'chrome.notifications.PermissionLevel.GRANTED',
    },
    TemplateType: {
      BASIC: 'chrome.notifications.TemplateType.BASIC',
      IMAGE: 'chrome.notifications.TemplateType.IMAGE',
      LIST: 'chrome.notifications.TemplateType.LIST',
      PROGRESS: 'chrome.notifications.TemplateType.PROGRESS',
    },
  },
  permissions: {
    onRemoved: {
      addListener: logger('chrome.permissions.onRemoved.addListener'),
      removeListener: logger('chrome.permissions.onRemoved.removeListener'),
      hasListener: logger('chrome.permissions.onRemoved.hasListener'),
      hasListeners: logger('chrome.permissions.onRemoved.hasListeners'),
      dispatch: logger('chrome.permissions.onRemoved.dispatch'),
    },
    onAdded: {
      addListener: logger('chrome.permissions.onAdded.addListener'),
      removeListener: logger('chrome.permissions.onAdded.removeListener'),
      hasListener: logger('chrome.permissions.onAdded.hasListener'),
      hasListeners: logger('chrome.permissions.onAdded.hasListeners'),
      dispatch: logger('chrome.permissions.onAdded.dispatch'),
    },
    contains: logger('chrome.permissions.contains'),
    getAll: logger('chrome.permissions.getAll'),
    remove: logger('chrome.permissions.remove'),
    request: logger('chrome.permissions.request'),
  },
  runtime: {
    id: 'chrome.runtime.id',
    onRestartRequired: {
      addListener: logger('chrome.runtime.onRestartRequired.addListener'),
      removeListener: logger('chrome.runtime.onRestartRequired.removeListener'),
      hasListener: logger('chrome.runtime.onRestartRequired.hasListener'),
      hasListeners: logger('chrome.runtime.onRestartRequired.hasListeners'),
      dispatch: logger('chrome.runtime.onRestartRequired.dispatch'),
    },
    onMessageExternal: {
      addListener: logger('chrome.runtime.onMessageExternal.addListener'),
      removeListener: logger('chrome.runtime.onMessageExternal.removeListener'),
      hasListener: logger('chrome.runtime.onMessageExternal.hasListener'),
      hasListeners: logger('chrome.runtime.onMessageExternal.hasListeners'),
      dispatch: logger('chrome.runtime.onMessageExternal.dispatch'),
    },
    onMessage: {
      addListener: logger('chrome.runtime.onMessage.addListener'),
      removeListener: logger('chrome.runtime.onMessage.removeListener'),
      hasListener: logger('chrome.runtime.onMessage.hasListener'),
      hasListeners: logger('chrome.runtime.onMessage.hasListeners'),
      dispatch: logger('chrome.runtime.onMessage.dispatch'),
    },
    onConnectExternal: {
      addListener: logger('chrome.runtime.onConnectExternal.addListener'),
      removeListener: logger('chrome.runtime.onConnectExternal.removeListener'),
      hasListener: logger('chrome.runtime.onConnectExternal.hasListener'),
      hasListeners: logger('chrome.runtime.onConnectExternal.hasListeners'),
      dispatch: logger('chrome.runtime.onConnectExternal.dispatch'),
    },
    onConnect: {
      addListener: logger('chrome.runtime.onConnect.addListener'),
      removeListener: logger('chrome.runtime.onConnect.removeListener'),
      hasListener: logger('chrome.runtime.onConnect.hasListener'),
      hasListeners: logger('chrome.runtime.onConnect.hasListeners'),
      dispatch: logger('chrome.runtime.onConnect.dispatch'),
    },
    onBrowserUpdateAvailable: {
      addListener: logger('chrome.runtime.onBrowserUpdateAvailable.addListener'),
      removeListener: logger('chrome.runtime.onBrowserUpdateAvailable.removeListener'),
      hasListener: logger('chrome.runtime.onBrowserUpdateAvailable.hasListener'),
      hasListeners: logger('chrome.runtime.onBrowserUpdateAvailable.hasListeners'),
      dispatch: logger('chrome.runtime.onBrowserUpdateAvailable.dispatch'),
    },
    onUpdateAvailable: {
      addListener: logger('chrome.runtime.onUpdateAvailable.addListener'),
      removeListener: logger('chrome.runtime.onUpdateAvailable.removeListener'),
      hasListener: logger('chrome.runtime.onUpdateAvailable.hasListener'),
      hasListeners: logger('chrome.runtime.onUpdateAvailable.hasListeners'),
      dispatch: logger('chrome.runtime.onUpdateAvailable.dispatch'),
    },
    onSuspendCanceled: {
      addListener: logger('chrome.runtime.onSuspendCanceled.addListener'),
      removeListener: logger('chrome.runtime.onSuspendCanceled.removeListener'),
      hasListener: logger('chrome.runtime.onSuspendCanceled.hasListener'),
      hasListeners: logger('chrome.runtime.onSuspendCanceled.hasListeners'),
      dispatch: logger('chrome.runtime.onSuspendCanceled.dispatch'),
    },
    onSuspend: {
      addListener: logger('chrome.runtime.onSuspend.addListener'),
      removeListener: logger('chrome.runtime.onSuspend.removeListener'),
      hasListener: logger('chrome.runtime.onSuspend.hasListener'),
      hasListeners: logger('chrome.runtime.onSuspend.hasListeners'),
      dispatch: logger('chrome.runtime.onSuspend.dispatch'),
    },
    onInstalled: {
      addListener: logger('chrome.runtime.onInstalled.addListener'),
      removeListener: logger('chrome.runtime.onInstalled.removeListener'),
      hasListener: logger('chrome.runtime.onInstalled.hasListener'),
      hasListeners: logger('chrome.runtime.onInstalled.hasListeners'),
      dispatch: logger('chrome.runtime.onInstalled.dispatch'),
    },
    onStartup: {
      addListener: logger('chrome.runtime.onStartup.addListener'),
      removeListener: logger('chrome.runtime.onStartup.removeListener'),
      hasListener: logger('chrome.runtime.onStartup.hasListener'),
      hasListeners: logger('chrome.runtime.onStartup.hasListeners'),
      dispatch: logger('chrome.runtime.onStartup.dispatch'),
    },
    connect: logger('chrome.runtime.connect'),
    getBackgroundPage: logger('chrome.runtime.getBackgroundPage'),
    getManifest: logger('chrome.runtime.getManifest'),
    getPackageDirectoryEntry: logger('chrome.runtime.getPackageDirectoryEntry'),
    getPlatformInfo: logger('chrome.runtime.getPlatformInfo'),
    getURL: logger('chrome.runtime.getURL'),
    openOptionsPage: logger('chrome.runtime.openOptionsPage'),
    reload: logger('chrome.runtime.reload'),
    requestUpdateCheck: logger('chrome.runtime.requestUpdateCheck'),
    restart: logger('chrome.runtime.restart'),
    restartAfterDelay: logger('chrome.runtime.restartAfterDelay'),
    sendMessage: logger('chrome.runtime.sendMessage'),
    setUninstallURL: logger('chrome.runtime.setUninstallURL'),
    OnInstalledReason: {
      CHROME_UPDATE: 'chrome.runtime.OnInstalledReason.CHROME_UPDATE',
      INSTALL: 'chrome.runtime.OnInstalledReason.INSTALL',
      SHARED_MODULE_UPDATE: 'chrome.runtime.OnInstalledReason.SHARED_MODULE_UPDATE',
      UPDATE: 'chrome.runtime.OnInstalledReason.UPDATE',
    },
    OnRestartRequiredReason: {
      APP_UPDATE: 'chrome.runtime.OnRestartRequiredReason.APP_UPDATE',
      OS_UPDATE: 'chrome.runtime.OnRestartRequiredReason.OS_UPDATE',
      PERIODIC: 'chrome.runtime.OnRestartRequiredReason.PERIODIC',
    },
    PlatformArch: {
      ARM: 'chrome.runtime.PlatformArch.ARM',
      ARM64: 'chrome.runtime.PlatformArch.ARM64',
      MIPS: 'chrome.runtime.PlatformArch.MIPS',
      MIPS64: 'chrome.runtime.PlatformArch.MIPS64',
      X86_32: 'chrome.runtime.PlatformArch.X86_32',
      X86_64: 'chrome.runtime.PlatformArch.X86_64',
    },
    PlatformNaclArch: {
      ARM: 'chrome.runtime.PlatformNaclArch.ARM',
      MIPS: 'chrome.runtime.PlatformNaclArch.MIPS',
      MIPS64: 'chrome.runtime.PlatformNaclArch.MIPS64',
      X86_32: 'chrome.runtime.PlatformNaclArch.X86_32',
      X86_64: 'chrome.runtime.PlatformNaclArch.X86_64',
    },
    PlatformOs: {
      ANDROID: 'chrome.runtime.PlatformOs.ANDROID',
      CROS: 'chrome.runtime.PlatformOs.CROS',
      FUCHSIA: 'chrome.runtime.PlatformOs.FUCHSIA',
      LINUX: 'chrome.runtime.PlatformOs.LINUX',
      MAC: 'chrome.runtime.PlatformOs.MAC',
      OPENBSD: 'chrome.runtime.PlatformOs.OPENBSD',
      WIN: 'chrome.runtime.PlatformOs.WIN',
    },
    RequestUpdateCheckStatus: {
      NO_UPDATE: 'chrome.runtime.RequestUpdateCheckStatus.NO_UPDATE',
      THROTTLED: 'chrome.runtime.RequestUpdateCheckStatus.THROTTLED',
      UPDATE_AVAILABLE: 'chrome.runtime.RequestUpdateCheckStatus.UPDATE_AVAILABLE',
    },
  },
  scripting: {
    executeScript: logger('chrome.scripting.executeScript'),
    getRegisteredContentScripts: logger('chrome.scripting.getRegisteredContentScripts'),
    insertCSS: logger('chrome.scripting.insertCSS'),
    registerContentScripts: logger('chrome.scripting.registerContentScripts'),
    removeCSS: logger('chrome.scripting.removeCSS'),
    unregisterContentScripts: logger('chrome.scripting.unregisterContentScripts'),
    updateContentScripts: logger('chrome.scripting.updateContentScripts'),
    ExecutionWorld: {
      ISOLATED: 'chrome.scripting.ExecutionWorld.ISOLATED',
      MAIN: 'chrome.scripting.ExecutionWorld.MAIN',
    },
    StyleOrigin: {
      AUTHOR: 'chrome.scripting.StyleOrigin.AUTHOR',
      USER: 'chrome.scripting.StyleOrigin.USER',
    },
  },
  storage: {
    sync: {
      get: logger('chrome.storage.sync.get'),
      set: logger('chrome.storage.sync.set'),
      remove: logger('chrome.storage.sync.remove'),
      clear: logger('chrome.storage.sync.clear'),
      getBytesInUse: logger('chrome.storage.sync.getBytesInUse'),
      onChanged: {
        addListener: logger('chrome.storage.sync.onChanged.addListener'),
        removeListener: logger('chrome.storage.sync.onChanged.removeListener'),
        hasListener: logger('chrome.storage.sync.onChanged.hasListener'),
        hasListeners: logger('chrome.storage.sync.onChanged.hasListeners'),
        dispatch: logger('chrome.storage.sync.onChanged.dispatch'),
      },
      QUOTA_BYTES: 'chrome.storage.sync.QUOTA_BYTES',
      QUOTA_BYTES_PER_ITEM: 'chrome.storage.sync.QUOTA_BYTES_PER_ITEM',
      MAX_ITEMS: 'chrome.storage.sync.MAX_ITEMS',
      MAX_WRITE_OPERATIONS_PER_HOUR: 'chrome.storage.sync.MAX_WRITE_OPERATIONS_PER_HOUR',
      MAX_WRITE_OPERATIONS_PER_MINUTE: 'chrome.storage.sync.MAX_WRITE_OPERATIONS_PER_MINUTE',
      MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE: 'chrome.storage.sync.MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE',
    },
    session: {
      get: logger('chrome.storage.session.get'),
      set: logger('chrome.storage.session.set'),
      remove: logger('chrome.storage.session.remove'),
      clear: logger('chrome.storage.session.clear'),
      getBytesInUse: logger('chrome.storage.session.getBytesInUse'),
      setAccessLevel: logger('chrome.storage.session.setAccessLevel'),
      onChanged: {
        addListener: logger('chrome.storage.session.onChanged.addListener'),
        removeListener: logger('chrome.storage.session.onChanged.removeListener'),
        hasListener: logger('chrome.storage.session.onChanged.hasListener'),
        hasListeners: logger('chrome.storage.session.onChanged.hasListeners'),
        dispatch: logger('chrome.storage.session.onChanged.dispatch'),
      },
      QUOTA_BYTES: 'chrome.storage.session.QUOTA_BYTES',
    },
    managed: {
      get: logger('chrome.storage.managed.get'),
      set: logger('chrome.storage.managed.set'),
      remove: logger('chrome.storage.managed.remove'),
      clear: logger('chrome.storage.managed.clear'),
      getBytesInUse: logger('chrome.storage.managed.getBytesInUse'),
      onChanged: {
        addListener: logger('chrome.storage.managed.onChanged.addListener'),
        removeListener: logger('chrome.storage.managed.onChanged.removeListener'),
        hasListener: logger('chrome.storage.managed.onChanged.hasListener'),
        hasListeners: logger('chrome.storage.managed.onChanged.hasListeners'),
        dispatch: logger('chrome.storage.managed.onChanged.dispatch'),
      },
    },
    local: {
      get: logger('chrome.storage.local.get'),
      set: logger('chrome.storage.local.set'),
      remove: logger('chrome.storage.local.remove'),
      clear: logger('chrome.storage.local.clear'),
      getBytesInUse: logger('chrome.storage.local.getBytesInUse'),
      onChanged: {
        addListener: logger('chrome.storage.local.onChanged.addListener'),
        removeListener: logger('chrome.storage.local.onChanged.removeListener'),
        hasListener: logger('chrome.storage.local.onChanged.hasListener'),
        hasListeners: logger('chrome.storage.local.onChanged.hasListeners'),
        dispatch: logger('chrome.storage.local.onChanged.dispatch'),
      },
      QUOTA_BYTES: 'chrome.storage.local.QUOTA_BYTES',
    },
    onChanged: {
      addListener: logger('chrome.storage.onChanged.addListener'),
      removeListener: logger('chrome.storage.onChanged.removeListener'),
      hasListener: logger('chrome.storage.onChanged.hasListener'),
      hasListeners: logger('chrome.storage.onChanged.hasListeners'),
      dispatch: logger('chrome.storage.onChanged.dispatch'),
    },
    AccessLevel: {
      TRUSTED_AND_UNTRUSTED_CONTEXTS: 'chrome.storage.AccessLevel.TRUSTED_AND_UNTRUSTED_CONTEXTS',
      TRUSTED_CONTEXTS: 'chrome.storage.AccessLevel.TRUSTED_CONTEXTS',
    },
  },
  tabs: {
    onZoomChange: {
      addListener: logger('chrome.tabs.onZoomChange.addListener'),
      removeListener: logger('chrome.tabs.onZoomChange.removeListener'),
      hasListener: logger('chrome.tabs.onZoomChange.hasListener'),
      hasListeners: logger('chrome.tabs.onZoomChange.hasListeners'),
      dispatch: logger('chrome.tabs.onZoomChange.dispatch'),
    },
    onReplaced: {
      addListener: logger('chrome.tabs.onReplaced.addListener'),
      removeListener: logger('chrome.tabs.onReplaced.removeListener'),
      hasListener: logger('chrome.tabs.onReplaced.hasListener'),
      hasListeners: logger('chrome.tabs.onReplaced.hasListeners'),
      dispatch: logger('chrome.tabs.onReplaced.dispatch'),
    },
    onRemoved: {
      addListener: logger('chrome.tabs.onRemoved.addListener'),
      removeListener: logger('chrome.tabs.onRemoved.removeListener'),
      hasListener: logger('chrome.tabs.onRemoved.hasListener'),
      hasListeners: logger('chrome.tabs.onRemoved.hasListeners'),
      dispatch: logger('chrome.tabs.onRemoved.dispatch'),
    },
    onAttached: {
      addListener: logger('chrome.tabs.onAttached.addListener'),
      removeListener: logger('chrome.tabs.onAttached.removeListener'),
      hasListener: logger('chrome.tabs.onAttached.hasListener'),
      hasListeners: logger('chrome.tabs.onAttached.hasListeners'),
      dispatch: logger('chrome.tabs.onAttached.dispatch'),
    },
    onDetached: {
      addListener: logger('chrome.tabs.onDetached.addListener'),
      removeListener: logger('chrome.tabs.onDetached.removeListener'),
      hasListener: logger('chrome.tabs.onDetached.hasListener'),
      hasListeners: logger('chrome.tabs.onDetached.hasListeners'),
      dispatch: logger('chrome.tabs.onDetached.dispatch'),
    },
    onHighlighted: {
      addListener: logger('chrome.tabs.onHighlighted.addListener'),
      removeListener: logger('chrome.tabs.onHighlighted.removeListener'),
      hasListener: logger('chrome.tabs.onHighlighted.hasListener'),
      hasListeners: logger('chrome.tabs.onHighlighted.hasListeners'),
      dispatch: logger('chrome.tabs.onHighlighted.dispatch'),
    },
    onActivated: {
      addListener: logger('chrome.tabs.onActivated.addListener'),
      removeListener: logger('chrome.tabs.onActivated.removeListener'),
      hasListener: logger('chrome.tabs.onActivated.hasListener'),
      hasListeners: logger('chrome.tabs.onActivated.hasListeners'),
      dispatch: logger('chrome.tabs.onActivated.dispatch'),
    },
    onMoved: {
      addListener: logger('chrome.tabs.onMoved.addListener'),
      removeListener: logger('chrome.tabs.onMoved.removeListener'),
      hasListener: logger('chrome.tabs.onMoved.hasListener'),
      hasListeners: logger('chrome.tabs.onMoved.hasListeners'),
      dispatch: logger('chrome.tabs.onMoved.dispatch'),
    },
    onUpdated: {
      addListener: logger('chrome.tabs.onUpdated.addListener'),
      removeListener: logger('chrome.tabs.onUpdated.removeListener'),
      hasListener: logger('chrome.tabs.onUpdated.hasListener'),
      hasListeners: logger('chrome.tabs.onUpdated.hasListeners'),
      dispatch: logger('chrome.tabs.onUpdated.dispatch'),
    },
    onCreated: {
      addListener: logger('chrome.tabs.onCreated.addListener'),
      removeListener: logger('chrome.tabs.onCreated.removeListener'),
      hasListener: logger('chrome.tabs.onCreated.hasListener'),
      hasListeners: logger('chrome.tabs.onCreated.hasListeners'),
      dispatch: logger('chrome.tabs.onCreated.dispatch'),
    },
    captureVisibleTab: logger('chrome.tabs.captureVisibleTab'),
    connect: logger('chrome.tabs.connect'),
    create: logger('chrome.tabs.create'),
    detectLanguage: logger('chrome.tabs.detectLanguage'),
    discard: logger('chrome.tabs.discard'),
    duplicate: logger('chrome.tabs.duplicate'),
    get: logger('chrome.tabs.get'),
    getCurrent: logger('chrome.tabs.getCurrent'),
    getZoom: logger('chrome.tabs.getZoom'),
    getZoomSettings: logger('chrome.tabs.getZoomSettings'),
    goBack: logger('chrome.tabs.goBack'),
    goForward: logger('chrome.tabs.goForward'),
    group: logger('chrome.tabs.group'),
    highlight: logger('chrome.tabs.highlight'),
    move: logger('chrome.tabs.move'),
    query: logger('chrome.tabs.query'),
    reload: logger('chrome.tabs.reload'),
    remove: logger('chrome.tabs.remove'),
    sendMessage: logger('chrome.tabs.sendMessage'),
    setZoom: logger('chrome.tabs.setZoom'),
    setZoomSettings: logger('chrome.tabs.setZoomSettings'),
    ungroup: logger('chrome.tabs.ungroup'),
    update: logger('chrome.tabs.update'),
    MutedInfoReason: {
      CAPTURE: 'chrome.tabs.MutedInfoReason.CAPTURE',
      EXTENSION: 'chrome.tabs.MutedInfoReason.EXTENSION',
      USER: 'chrome.tabs.MutedInfoReason.USER',
    },
    TabStatus: {
      COMPLETE: 'chrome.tabs.TabStatus.COMPLETE',
      LOADING: 'chrome.tabs.TabStatus.LOADING',
      UNLOADED: 'chrome.tabs.TabStatus.UNLOADED',
    },
    WindowType: {
      APP: 'chrome.tabs.WindowType.APP',
      DEVTOOLS: 'chrome.tabs.WindowType.DEVTOOLS',
      NORMAL: 'chrome.tabs.WindowType.NORMAL',
      PANEL: 'chrome.tabs.WindowType.PANEL',
      POPUP: 'chrome.tabs.WindowType.POPUP',
    },
    ZoomSettingsMode: {
      AUTOMATIC: 'chrome.tabs.ZoomSettingsMode.AUTOMATIC',
      DISABLED: 'chrome.tabs.ZoomSettingsMode.DISABLED',
      MANUAL: 'chrome.tabs.ZoomSettingsMode.MANUAL',
    },
    ZoomSettingsScope: {
      PER_ORIGIN: 'chrome.tabs.ZoomSettingsScope.PER_ORIGIN',
      PER_TAB: 'chrome.tabs.ZoomSettingsScope.PER_TAB',
    },
    MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND: 'chrome.tabs.MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND',
    TAB_ID_NONE: 'chrome.tabs.TAB_ID_NONE',
  },
  windows: {
    onBoundsChanged: {
      addListener: logger('chrome.windows.onBoundsChanged.addListener'),
      removeListener: logger('chrome.windows.onBoundsChanged.removeListener'),
      hasListener: logger('chrome.windows.onBoundsChanged.hasListener'),
      hasListeners: logger('chrome.windows.onBoundsChanged.hasListeners'),
      dispatch: logger('chrome.windows.onBoundsChanged.dispatch'),
    },
    onFocusChanged: {
      addListener: logger('chrome.windows.onFocusChanged.addListener'),
      removeListener: logger('chrome.windows.onFocusChanged.removeListener'),
      hasListener: logger('chrome.windows.onFocusChanged.hasListener'),
      hasListeners: logger('chrome.windows.onFocusChanged.hasListeners'),
      dispatch: logger('chrome.windows.onFocusChanged.dispatch'),
    },
    onRemoved: {
      addListener: logger('chrome.windows.onRemoved.addListener'),
      removeListener: logger('chrome.windows.onRemoved.removeListener'),
      hasListener: logger('chrome.windows.onRemoved.hasListener'),
      hasListeners: logger('chrome.windows.onRemoved.hasListeners'),
      dispatch: logger('chrome.windows.onRemoved.dispatch'),
    },
    onCreated: {
      addListener: logger('chrome.windows.onCreated.addListener'),
      removeListener: logger('chrome.windows.onCreated.removeListener'),
      hasListener: logger('chrome.windows.onCreated.hasListener'),
      hasListeners: logger('chrome.windows.onCreated.hasListeners'),
      dispatch: logger('chrome.windows.onCreated.dispatch'),
    },
    create: logger('chrome.windows.create'),
    get: logger('chrome.windows.get'),
    getAll: logger('chrome.windows.getAll'),
    getCurrent: logger('chrome.windows.getCurrent'),
    getLastFocused: logger('chrome.windows.getLastFocused'),
    remove: logger('chrome.windows.remove'),
    update: logger('chrome.windows.update'),
    CreateType: {
      NORMAL: 'chrome.windows.CreateType.NORMAL',
      PANEL: 'chrome.windows.CreateType.PANEL',
      POPUP: 'chrome.windows.CreateType.POPUP',
    },
    WindowState: {
      FULLSCREEN: 'chrome.windows.WindowState.FULLSCREEN',
      LOCKED_FULLSCREEN: 'chrome.windows.WindowState.LOCKED_FULLSCREEN',
      MAXIMIZED: 'chrome.windows.WindowState.MAXIMIZED',
      MINIMIZED: 'chrome.windows.WindowState.MINIMIZED',
      NORMAL: 'chrome.windows.WindowState.NORMAL',
    },
    WindowType: {
      APP: 'chrome.windows.WindowType.APP',
      DEVTOOLS: 'chrome.windows.WindowType.DEVTOOLS',
      NORMAL: 'chrome.windows.WindowType.NORMAL',
      PANEL: 'chrome.windows.WindowType.PANEL',
      POPUP: 'chrome.windows.WindowType.POPUP',
    },
    WINDOW_ID_CURRENT: 'chrome.windows.WINDOW_ID_CURRENT',
    WINDOW_ID_NONE: 'chrome.windows.WINDOW_ID_NONE',
  },
} as unknown as typeof chrome;

export const patchChrome = (_global = window) => {
  _global._chrome = chrome;
  _global.chrome = deepMerge(_global.chrome, chromePatch);
  return _global.chrome;
};
